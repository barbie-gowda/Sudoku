{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\LENOVO\\\\Desktop\\\\Sudoku\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialGrid = Array(9).fill(null).map(() => Array(9).fill(''));\nconst isValid = grid => {\n  // Validation logic here\n};\nconst solveSudoku = grid => {\n  // Sudoku solving logic here\n};\nconst getHint = grid => {\n  // Hint logic here\n};\nfunction App() {\n  _s();\n  const [grid, setGrid] = useState(initialGrid);\n  const [error, setError] = useState('');\n  const [solvedGrid, setSolvedGrid] = useState(null);\n  const [hint, setHint] = useState('');\n  const handleChange = (e, rowIdx, colIdx) => {\n    const value = e.target.value;\n    if (!/^[1-9]?$/.test(value)) return;\n    const newGrid = grid.map(row => [...row]);\n    newGrid[rowIdx][colIdx] = value;\n    setGrid(newGrid);\n  };\n  const validateGrid = () => {\n    if (!isValid(grid)) {\n      setError('Invalid Sudoku grid');\n      setSolvedGrid(null);\n    } else {\n      setError('Grid is valid');\n    }\n  };\n  const solveGrid = () => {\n    if (isValid(grid)) {\n      const result = solveSudoku(grid);\n      setSolvedGrid(result);\n      setError('');\n    } else {\n      setError('Invalid Sudoku grid');\n      setSolvedGrid(null);\n    }\n  };\n  const provideHint = () => {\n    const hint = getHint(grid);\n    if (hint) {\n      setHint(`Try ${hint.num} at position (${hint.row + 1}, ${hint.col + 1})`);\n    } else {\n      setHint('No hints available');\n    }\n  };\n  const clearGrid = () => {\n    setGrid(initialGrid);\n    setError('');\n    setSolvedGrid(null);\n    setHint('');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Sudoku Solver\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid\",\n        children: grid.map((row, rIdx) => row.map((value, cIdx) => /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: value,\n          onChange: e => handleChange(e, rIdx, cIdx),\n          className: \"cell\"\n        }, `${rIdx}-${cIdx}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 25\n        }, this)))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"buttons\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: validateGrid,\n          children: \"Validate\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: solveGrid,\n          children: \"Solve\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: provideHint,\n          children: \"Hint\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"clear-button\",\n          onClick: clearGrid,\n          children: \"Clear\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 23\n    }, this), hint && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"hint\",\n      children: hint\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 22\n    }, this), solvedGrid && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Solved Sudoku:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid\",\n        children: solvedGrid.map((row, rIdx) => row.map((value, cIdx) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"cell solved\",\n          children: value\n        }, `${rIdx}-${cIdx}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 29\n        }, this)))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"aLVFgxs/1Qp8tdIUuN+FeCdFGKM=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","initialGrid","Array","fill","map","isValid","grid","solveSudoku","getHint","App","_s","setGrid","error","setError","solvedGrid","setSolvedGrid","hint","setHint","handleChange","e","rowIdx","colIdx","value","target","test","newGrid","row","validateGrid","solveGrid","result","provideHint","num","col","clearGrid","className","children","fileName","_jsxFileName","lineNumber","columnNumber","rIdx","cIdx","type","onChange","onClick","_c","$RefreshReg$"],"sources":["C:/Users/LENOVO/Desktop/Sudoku/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport './App.css';\r\n\r\nconst initialGrid = Array(9).fill(null).map(() => Array(9).fill(''));\r\n\r\nconst isValid = (grid) => {\r\n    // Validation logic here\r\n};\r\n\r\nconst solveSudoku = (grid) => {\r\n    // Sudoku solving logic here\r\n};\r\n\r\nconst getHint = (grid) => {\r\n    // Hint logic here\r\n};\r\n\r\nfunction App() {\r\n    const [grid, setGrid] = useState(initialGrid);\r\n    const [error, setError] = useState('');\r\n    const [solvedGrid, setSolvedGrid] = useState(null);\r\n    const [hint, setHint] = useState('');\r\n\r\n    const handleChange = (e, rowIdx, colIdx) => {\r\n        const value = e.target.value;\r\n        if (!/^[1-9]?$/.test(value)) return;\r\n\r\n        const newGrid = grid.map(row => [...row]);\r\n        newGrid[rowIdx][colIdx] = value;\r\n        setGrid(newGrid);\r\n    };\r\n\r\n    const validateGrid = () => {\r\n        if (!isValid(grid)) {\r\n            setError('Invalid Sudoku grid');\r\n            setSolvedGrid(null);\r\n        } else {\r\n            setError('Grid is valid');\r\n        }\r\n    };\r\n\r\n    const solveGrid = () => {\r\n        if (isValid(grid)) {\r\n            const result = solveSudoku(grid);\r\n            setSolvedGrid(result);\r\n            setError('');\r\n        } else {\r\n            setError('Invalid Sudoku grid');\r\n            setSolvedGrid(null);\r\n        }\r\n    };\r\n\r\n    const provideHint = () => {\r\n        const hint = getHint(grid);\r\n        if (hint) {\r\n            setHint(`Try ${hint.num} at position (${hint.row + 1}, ${hint.col + 1})`);\r\n        } else {\r\n            setHint('No hints available');\r\n        }\r\n    };\r\n\r\n    const clearGrid = () => {\r\n        setGrid(initialGrid);\r\n        setError('');\r\n        setSolvedGrid(null);\r\n        setHint('');\r\n    };\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <h1>Sudoku Solver</h1>\r\n            <div className=\"container\">\r\n                <div className=\"grid\">\r\n                    {grid.map((row, rIdx) => row.map((value, cIdx) => (\r\n                        <input\r\n                            key={`${rIdx}-${cIdx}`}\r\n                            type=\"text\"\r\n                            value={value}\r\n                            onChange={(e) => handleChange(e, rIdx, cIdx)}\r\n                            className=\"cell\"\r\n                        />\r\n                    )))}\r\n                </div>\r\n                <div className=\"buttons\">\r\n                    <button onClick={validateGrid}>Validate</button>\r\n                    <button onClick={solveGrid}>Solve</button>\r\n                    <button onClick={provideHint}>Hint</button>\r\n                    <button className=\"clear-button\" onClick={clearGrid}>Clear</button>\r\n                </div>\r\n            </div>\r\n            {error && <div className=\"error\">{error}</div>}\r\n            {hint && <div className=\"hint\">{hint}</div>}\r\n            {solvedGrid && (\r\n                <div>\r\n                    <h2>Solved Sudoku:</h2>\r\n                    <div className=\"grid\">\r\n                        {solvedGrid.map((row, rIdx) => row.map((value, cIdx) => (\r\n                            <div\r\n                                key={`${rIdx}-${cIdx}`}\r\n                                className=\"cell solved\"\r\n                            >\r\n                                {value}\r\n                            </div>\r\n                        )))}\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAO,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnB,MAAMC,WAAW,GAAGC,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC,CAACC,GAAG,CAAC,MAAMF,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,EAAE,CAAC,CAAC;AAEpE,MAAME,OAAO,GAAIC,IAAI,IAAK;EACtB;AAAA,CACH;AAED,MAAMC,WAAW,GAAID,IAAI,IAAK;EAC1B;AAAA,CACH;AAED,MAAME,OAAO,GAAIF,IAAI,IAAK;EACtB;AAAA,CACH;AAED,SAASG,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACX,MAAM,CAACJ,IAAI,EAAEK,OAAO,CAAC,GAAGb,QAAQ,CAACG,WAAW,CAAC;EAC7C,MAAM,CAACW,KAAK,EAAEC,QAAQ,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACgB,UAAU,EAAEC,aAAa,CAAC,GAAGjB,QAAQ,CAAC,IAAI,CAAC;EAClD,MAAM,CAACkB,IAAI,EAAEC,OAAO,CAAC,GAAGnB,QAAQ,CAAC,EAAE,CAAC;EAEpC,MAAMoB,YAAY,GAAGA,CAACC,CAAC,EAAEC,MAAM,EAAEC,MAAM,KAAK;IACxC,MAAMC,KAAK,GAAGH,CAAC,CAACI,MAAM,CAACD,KAAK;IAC5B,IAAI,CAAC,UAAU,CAACE,IAAI,CAACF,KAAK,CAAC,EAAE;IAE7B,MAAMG,OAAO,GAAGnB,IAAI,CAACF,GAAG,CAACsB,GAAG,IAAI,CAAC,GAAGA,GAAG,CAAC,CAAC;IACzCD,OAAO,CAACL,MAAM,CAAC,CAACC,MAAM,CAAC,GAAGC,KAAK;IAC/BX,OAAO,CAACc,OAAO,CAAC;EACpB,CAAC;EAED,MAAME,YAAY,GAAGA,CAAA,KAAM;IACvB,IAAI,CAACtB,OAAO,CAACC,IAAI,CAAC,EAAE;MAChBO,QAAQ,CAAC,qBAAqB,CAAC;MAC/BE,aAAa,CAAC,IAAI,CAAC;IACvB,CAAC,MAAM;MACHF,QAAQ,CAAC,eAAe,CAAC;IAC7B;EACJ,CAAC;EAED,MAAMe,SAAS,GAAGA,CAAA,KAAM;IACpB,IAAIvB,OAAO,CAACC,IAAI,CAAC,EAAE;MACf,MAAMuB,MAAM,GAAGtB,WAAW,CAACD,IAAI,CAAC;MAChCS,aAAa,CAACc,MAAM,CAAC;MACrBhB,QAAQ,CAAC,EAAE,CAAC;IAChB,CAAC,MAAM;MACHA,QAAQ,CAAC,qBAAqB,CAAC;MAC/BE,aAAa,CAAC,IAAI,CAAC;IACvB;EACJ,CAAC;EAED,MAAMe,WAAW,GAAGA,CAAA,KAAM;IACtB,MAAMd,IAAI,GAAGR,OAAO,CAACF,IAAI,CAAC;IAC1B,IAAIU,IAAI,EAAE;MACNC,OAAO,CAAC,OAAOD,IAAI,CAACe,GAAG,iBAAiBf,IAAI,CAACU,GAAG,GAAG,CAAC,KAAKV,IAAI,CAACgB,GAAG,GAAG,CAAC,GAAG,CAAC;IAC7E,CAAC,MAAM;MACHf,OAAO,CAAC,oBAAoB,CAAC;IACjC;EACJ,CAAC;EAED,MAAMgB,SAAS,GAAGA,CAAA,KAAM;IACpBtB,OAAO,CAACV,WAAW,CAAC;IACpBY,QAAQ,CAAC,EAAE,CAAC;IACZE,aAAa,CAAC,IAAI,CAAC;IACnBE,OAAO,CAAC,EAAE,CAAC;EACf,CAAC;EAED,oBACIjB,OAAA;IAAKkC,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAChBnC,OAAA;MAAAmC,QAAA,EAAI;IAAa;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACtBvC,OAAA;MAAKkC,SAAS,EAAC,WAAW;MAAAC,QAAA,gBACtBnC,OAAA;QAAKkC,SAAS,EAAC,MAAM;QAAAC,QAAA,EAChB7B,IAAI,CAACF,GAAG,CAAC,CAACsB,GAAG,EAAEc,IAAI,KAAKd,GAAG,CAACtB,GAAG,CAAC,CAACkB,KAAK,EAAEmB,IAAI,kBACzCzC,OAAA;UAEI0C,IAAI,EAAC,MAAM;UACXpB,KAAK,EAAEA,KAAM;UACbqB,QAAQ,EAAGxB,CAAC,IAAKD,YAAY,CAACC,CAAC,EAAEqB,IAAI,EAAEC,IAAI,CAAE;UAC7CP,SAAS,EAAC;QAAM,GAJX,GAAGM,IAAI,IAAIC,IAAI,EAAE;UAAAL,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAKzB,CACJ,CAAC;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACF,CAAC,eACNvC,OAAA;QAAKkC,SAAS,EAAC,SAAS;QAAAC,QAAA,gBACpBnC,OAAA;UAAQ4C,OAAO,EAAEjB,YAAa;UAAAQ,QAAA,EAAC;QAAQ;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eAChDvC,OAAA;UAAQ4C,OAAO,EAAEhB,SAAU;UAAAO,QAAA,EAAC;QAAK;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eAC1CvC,OAAA;UAAQ4C,OAAO,EAAEd,WAAY;UAAAK,QAAA,EAAC;QAAI;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eAC3CvC,OAAA;UAAQkC,SAAS,EAAC,cAAc;UAACU,OAAO,EAAEX,SAAU;UAAAE,QAAA,EAAC;QAAK;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAClE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL,CAAC,EACL3B,KAAK,iBAAIZ,OAAA;MAAKkC,SAAS,EAAC,OAAO;MAAAC,QAAA,EAAEvB;IAAK;MAAAwB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,EAC7CvB,IAAI,iBAAIhB,OAAA;MAAKkC,SAAS,EAAC,MAAM;MAAAC,QAAA,EAAEnB;IAAI;MAAAoB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,EAC1CzB,UAAU,iBACPd,OAAA;MAAAmC,QAAA,gBACInC,OAAA;QAAAmC,QAAA,EAAI;MAAc;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACvBvC,OAAA;QAAKkC,SAAS,EAAC,MAAM;QAAAC,QAAA,EAChBrB,UAAU,CAACV,GAAG,CAAC,CAACsB,GAAG,EAAEc,IAAI,KAAKd,GAAG,CAACtB,GAAG,CAAC,CAACkB,KAAK,EAAEmB,IAAI,kBAC/CzC,OAAA;UAEIkC,SAAS,EAAC,aAAa;UAAAC,QAAA,EAEtBb;QAAK,GAHD,GAAGkB,IAAI,IAAIC,IAAI,EAAE;UAAAL,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAIrB,CACR,CAAC;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACF,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL,CACR;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAEd;AAAC7B,EAAA,CA5FQD,GAAG;AAAAoC,EAAA,GAAHpC,GAAG;AA8FZ,eAAeA,GAAG;AAAC,IAAAoC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}