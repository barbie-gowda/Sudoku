{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\LENOVO\\\\Desktop\\\\Sudoku\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialGrid = Array(9).fill(null).map(() => Array(9).fill(''));\nconst isValid = grid => {\n  const isValidRow = row => {\n    const seen = new Set();\n    for (let num of row) {\n      if (num !== '' && seen.has(num)) return false;\n      seen.add(num);\n    }\n    return true;\n  };\n  const isValidCol = colIdx => {\n    const seen = new Set();\n    for (let i = 0; i < 9; i++) {\n      const num = grid[i][colIdx];\n      if (num !== '' && seen.has(num)) return false;\n      seen.add(num);\n    }\n    return true;\n  };\n  const isValidBox = (rowIdx, colIdx) => {\n    const seen = new Set();\n    for (let i = 0; i < 3; i++) {\n      for (let j = 0; j < 3; j++) {\n        const num = grid[rowIdx + i][colIdx + j];\n        if (num !== '' && seen.has(num)) return false;\n        seen.add(num);\n      }\n    }\n    return true;\n  };\n  for (let i = 0; i < 9; i++) {\n    if (!isValidRow(grid[i]) || !isValidCol(i)) return false;\n  }\n  for (let r = 0; r < 9; r += 3) {\n    for (let c = 0; c < 9; c += 3) {\n      if (!isValidBox(r, c)) return false;\n    }\n  }\n  return true;\n};\nconst solveSudoku = grid => {\n  const findEmpty = () => {\n    for (let r = 0; r < 9; r++) {\n      for (let c = 0; c < 9; c++) {\n        if (grid[r][c] === '') return [r, c];\n      }\n    }\n    return [-1, -1];\n  };\n  const isValid = (row, col, num) => {\n    for (let i = 0; i < 9; i++) {\n      if (grid[row][i] === num || grid[i][col] === num) return false;\n    }\n    const boxRowStart = row - row % 3;\n    const boxColStart = col - col % 3;\n    for (let r = boxRowStart; r < boxRowStart + 3; r++) {\n      for (let c = boxColStart; c < boxColStart + 3; c++) {\n        if (grid[r][c] === num) return false;\n      }\n    }\n    return true;\n  };\n  const backtrack = () => {\n    const [row, col] = findEmpty();\n    if (row === -1) return true;\n    for (let num = 1; num <= 9; num++) {\n      const strNum = num.toString();\n      if (isValid(row, col, strNum)) {\n        grid[row][col] = strNum;\n        if (backtrack()) return true;\n        grid[row][col] = '';\n      }\n    }\n    return false;\n  };\n  return backtrack() ? grid : null;\n};\nconst getHint = grid => {\n  const findEmpty = () => {\n    for (let r = 0; r < 9; r++) {\n      for (let c = 0; c < 9; c++) {\n        if (grid[r][c] === '') return [r, c];\n      }\n    }\n    return [-1, -1];\n  };\n  const isValid = (row, col, num) => {\n    for (let i = 0; i < 9; i++) {\n      if (grid[row][i] === num || grid[i][col] === num) return false;\n    }\n    const boxRowStart = row - row % 3;\n    const boxColStart = col - col % 3;\n    for (let r = boxRowStart; r < boxRowStart + 3; r++) {\n      for (let c = boxColStart; c < boxColStart + 3; c++) {\n        if (grid[r][c] === num) return false;\n      }\n    }\n    return true;\n  };\n  const [row, col] = findEmpty();\n  if (row === -1) return null;\n  for (let num = 1; num <= 9; num++) {\n    const strNum = num.toString();\n    if (isValid(row, col, strNum)) {\n      return {\n        row,\n        col,\n        value: strNum\n      };\n    }\n  }\n  return null;\n};\nfunction App() {\n  _s();\n  const [grid, setGrid] = useState(initialGrid);\n  const [error, setError] = useState('');\n  const [success, setSuccess] = useState('');\n  const [solvedGrid, setSolvedGrid] = useState(null);\n  const [hint, setHint] = useState('');\n  const inputRefs = useRef(Array(9).fill(null).map(() => Array(9).fill(null)));\n  const handleChange = (e, rowIdx, colIdx) => {\n    const value = e.target.value;\n    if (!/^[1-9]?$/.test(value)) return;\n    const newGrid = grid.map(row => [...row]);\n    newGrid[rowIdx][colIdx] = value;\n    setGrid(newGrid);\n\n    // Move focus to the next cell\n    if (value !== '') {\n      const nextCol = colIdx + 1;\n      const nextRow = nextCol === 9 ? rowIdx + 1 : rowIdx;\n      const nextColInRow = nextCol % 9;\n      if (nextRow < 9) {\n        inputRefs.current[nextRow][nextColInRow].focus();\n      }\n    }\n  };\n  const validate = () => {\n    if (isValid(grid)) {\n      setSuccess('Valid Sudoku grid');\n      setError('');\n      setSolvedGrid(null);\n    } else {\n      setError('Invalid Sudoku grid');\n      setSuccess('');\n      setSolvedGrid(null);\n    }\n  };\n  const solve = () => {\n    if (!isValid(grid)) {\n      setError('Invalid Sudoku grid');\n      setSuccess('');\n      setSolvedGrid(null);\n    } else {\n      setError('');\n      setSuccess('');\n      const result = solveSudoku(grid.map(row => [...row]));\n      setSolvedGrid(result);\n    }\n  };\n  const clearGrid = () => {\n    setGrid(initialGrid);\n    setSolvedGrid(null);\n    setError('');\n    setHint('');\n    setSuccess('');\n  };\n  const provideHint = () => {\n    if (isValid(grid)) {\n      const hintResult = getHint(grid);\n      if (hintResult) {\n        const newGrid = grid.map(row => [...row]);\n        newGrid[hintResult.row][hintResult.col] = hintResult.value;\n        setGrid(newGrid);\n        setHint(`Hint: Row ${hintResult.row + 1}, Col ${hintResult.col + 1} - ${hintResult.value}`);\n      } else {\n        setHint('No hint available');\n      }\n    } else {\n      setHint('Invalid Sudoku grid');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Sudoku Solver\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid\",\n        children: grid.map((row, rIdx) => row.map((value, cIdx) => /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: value,\n          onChange: e => handleChange(e, rIdx, cIdx),\n          className: \"cell\",\n          ref: el => inputRefs.current[rIdx][cIdx] = el\n        }, `${rIdx}-${cIdx}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 25\n        }, this)))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"buttons\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: validate,\n          children: \"Validate\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: solve,\n          children: \"Solve\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: provideHint,\n          children: \"Hint\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: clearGrid,\n          children: \"Clear\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 13\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 23\n    }, this), success && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"success\",\n      children: success\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 25\n    }, this), hint && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"hint\",\n      children: hint\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 22\n    }, this), solvedGrid && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"solved-grid\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Solved Sudoku:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid\",\n        children: solvedGrid.map((row, rIdx) => row.map((value, cIdx) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"cell solved\",\n          children: value\n        }, `${rIdx}-${cIdx}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 29\n        }, this)))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 204,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"t6pBLNINaJO7xh2wrbTIneaTY7E=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useRef","jsxDEV","_jsxDEV","initialGrid","Array","fill","map","isValid","grid","isValidRow","row","seen","Set","num","has","add","isValidCol","colIdx","i","isValidBox","rowIdx","j","r","c","solveSudoku","findEmpty","col","boxRowStart","boxColStart","backtrack","strNum","toString","getHint","value","App","_s","setGrid","error","setError","success","setSuccess","solvedGrid","setSolvedGrid","hint","setHint","inputRefs","handleChange","e","target","test","newGrid","nextCol","nextRow","nextColInRow","current","focus","validate","solve","result","clearGrid","provideHint","hintResult","className","children","fileName","_jsxFileName","lineNumber","columnNumber","rIdx","cIdx","type","onChange","ref","el","onClick","_c","$RefreshReg$"],"sources":["C:/Users/LENOVO/Desktop/Sudoku/src/App.js"],"sourcesContent":["import React, { useState, useRef } from 'react';\r\nimport './App.css';\r\n\r\nconst initialGrid = Array(9).fill(null).map(() => Array(9).fill(''));\r\n\r\nconst isValid = (grid) => {\r\n    const isValidRow = (row) => {\r\n        const seen = new Set();\r\n        for (let num of row) {\r\n            if (num !== '' && seen.has(num)) return false;\r\n            seen.add(num);\r\n        }\r\n        return true;\r\n    };\r\n\r\n    const isValidCol = (colIdx) => {\r\n        const seen = new Set();\r\n        for (let i = 0; i < 9; i++) {\r\n            const num = grid[i][colIdx];\r\n            if (num !== '' && seen.has(num)) return false;\r\n            seen.add(num);\r\n        }\r\n        return true;\r\n    };\r\n\r\n    const isValidBox = (rowIdx, colIdx) => {\r\n        const seen = new Set();\r\n        for (let i = 0; i < 3; i++) {\r\n            for (let j = 0; j < 3; j++) {\r\n                const num = grid[rowIdx + i][colIdx + j];\r\n                if (num !== '' && seen.has(num)) return false;\r\n                seen.add(num);\r\n            }\r\n        }\r\n        return true;\r\n    };\r\n\r\n    for (let i = 0; i < 9; i++) {\r\n        if (!isValidRow(grid[i]) || !isValidCol(i)) return false;\r\n    }\r\n    for (let r = 0; r < 9; r += 3) {\r\n        for (let c = 0; c < 9; c += 3) {\r\n            if (!isValidBox(r, c)) return false;\r\n        }\r\n    }\r\n    return true;\r\n};\r\n\r\nconst solveSudoku = (grid) => {\r\n    const findEmpty = () => {\r\n        for (let r = 0; r < 9; r++) {\r\n            for (let c = 0; c < 9; c++) {\r\n                if (grid[r][c] === '') return [r, c];\r\n            }\r\n        }\r\n        return [-1, -1];\r\n    };\r\n\r\n    const isValid = (row, col, num) => {\r\n        for (let i = 0; i < 9; i++) {\r\n            if (grid[row][i] === num || grid[i][col] === num) return false;\r\n        }\r\n        const boxRowStart = row - (row % 3);\r\n        const boxColStart = col - (col % 3);\r\n        for (let r = boxRowStart; r < boxRowStart + 3; r++) {\r\n            for (let c = boxColStart; c < boxColStart + 3; c++) {\r\n                if (grid[r][c] === num) return false;\r\n            }\r\n        }\r\n        return true;\r\n    };\r\n\r\n    const backtrack = () => {\r\n        const [row, col] = findEmpty();\r\n        if (row === -1) return true;\r\n\r\n        for (let num = 1; num <= 9; num++) {\r\n            const strNum = num.toString();\r\n            if (isValid(row, col, strNum)) {\r\n                grid[row][col] = strNum;\r\n                if (backtrack()) return true;\r\n                grid[row][col] = '';\r\n            }\r\n        }\r\n        return false;\r\n    };\r\n\r\n    return backtrack() ? grid : null;\r\n};\r\n\r\nconst getHint = (grid) => {\r\n    const findEmpty = () => {\r\n        for (let r = 0; r < 9; r++) {\r\n            for (let c = 0; c < 9; c++) {\r\n                if (grid[r][c] === '') return [r, c];\r\n            }\r\n        }\r\n        return [-1, -1];\r\n    };\r\n\r\n    const isValid = (row, col, num) => {\r\n        for (let i = 0; i < 9; i++) {\r\n            if (grid[row][i] === num || grid[i][col] === num) return false;\r\n        }\r\n        const boxRowStart = row - (row % 3);\r\n        const boxColStart = col - (col % 3);\r\n        for (let r = boxRowStart; r < boxRowStart + 3; r++) {\r\n            for (let c = boxColStart; c < boxColStart + 3; c++) {\r\n                if (grid[r][c] === num) return false;\r\n            }\r\n        }\r\n        return true;\r\n    };\r\n\r\n    const [row, col] = findEmpty();\r\n    if (row === -1) return null;\r\n\r\n    for (let num = 1; num <= 9; num++) {\r\n        const strNum = num.toString();\r\n        if (isValid(row, col, strNum)) {\r\n            return { row, col, value: strNum };\r\n        }\r\n    }\r\n    return null;\r\n};\r\n\r\nfunction App() {\r\n    const [grid, setGrid] = useState(initialGrid);\r\n    const [error, setError] = useState('');\r\n    const [success, setSuccess] = useState('');\r\n    const [solvedGrid, setSolvedGrid] = useState(null);\r\n    const [hint, setHint] = useState('');\r\n    const inputRefs = useRef(Array(9).fill(null).map(() => Array(9).fill(null)));\r\n\r\n    const handleChange = (e, rowIdx, colIdx) => {\r\n        const value = e.target.value;\r\n        if (!/^[1-9]?$/.test(value)) return;\r\n\r\n        const newGrid = grid.map(row => [...row]);\r\n        newGrid[rowIdx][colIdx] = value;\r\n        setGrid(newGrid);\r\n\r\n        // Move focus to the next cell\r\n        if (value !== '') {\r\n            const nextCol = colIdx + 1;\r\n            const nextRow = nextCol === 9 ? rowIdx + 1 : rowIdx;\r\n            const nextColInRow = nextCol % 9;\r\n            if (nextRow < 9) {\r\n                inputRefs.current[nextRow][nextColInRow].focus();\r\n            }\r\n        }\r\n    };\r\n\r\n    const validate = () => {\r\n        if (isValid(grid)) {\r\n            setSuccess('Valid Sudoku grid');\r\n            setError('');\r\n            setSolvedGrid(null);\r\n        } else {\r\n            setError('Invalid Sudoku grid');\r\n            setSuccess('');\r\n            setSolvedGrid(null);\r\n        }\r\n    };\r\n\r\n    const solve = () => {\r\n        if (!isValid(grid)) {\r\n            setError('Invalid Sudoku grid');\r\n            setSuccess('');\r\n            setSolvedGrid(null);\r\n        } else {\r\n            setError('');\r\n            setSuccess('');\r\n            const result = solveSudoku(grid.map(row => [...row]));\r\n            setSolvedGrid(result);\r\n        }\r\n    };\r\n\r\n    const clearGrid = () => {\r\n        setGrid(initialGrid);\r\n        setSolvedGrid(null);\r\n        setError('');\r\n        setHint('');\r\n        setSuccess('');\r\n    };\r\n\r\n    const provideHint = () => {\r\n        if (isValid(grid)) {\r\n            const hintResult = getHint(grid);\r\n            if (hintResult) {\r\n                const newGrid = grid.map(row => [...row]);\r\n                newGrid[hintResult.row][hintResult.col] = hintResult.value;\r\n                setGrid(newGrid);\r\n                setHint(`Hint: Row ${hintResult.row + 1}, Col ${hintResult.col + 1} - ${hintResult.value}`);\r\n            } else {\r\n                setHint('No hint available');\r\n            }\r\n        } else {\r\n            setHint('Invalid Sudoku grid');\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <h1>Sudoku Solver</h1>\r\n            <div className=\"container\">\r\n                <div className=\"grid\">\r\n                    {grid.map((row, rIdx) => row.map((value, cIdx) => (\r\n                        <input\r\n                            key={`${rIdx}-${cIdx}`}\r\n                            type=\"text\"\r\n                            value={value}\r\n                            onChange={(e) => handleChange(e, rIdx, cIdx)}\r\n                            className=\"cell\"\r\n                            ref={el => inputRefs.current[rIdx][cIdx] = el}\r\n                        />\r\n                    )))}\r\n                </div>\r\n                <div className=\"buttons\">\r\n                    <button onClick={validate}>Validate</button>\r\n                    <button onClick={solve}>Solve</button>\r\n                    <button onClick={provideHint}>Hint</button>\r\n                    <button onClick={clearGrid}>Clear</button>\r\n                </div>\r\n            </div>\r\n            {error && <div className=\"error\">{error}</div>}\r\n            {success && <div className=\"success\">{success}</div>}\r\n            {hint && <div className=\"hint\">{hint}</div>}\r\n            {solvedGrid && (\r\n                <div className=\"solved-grid\">\r\n                    <h2>Solved Sudoku:</h2>\r\n                    <div className=\"grid\">\r\n                        {solvedGrid.map((row, rIdx) => row.map((value, cIdx) => (\r\n                            <div\r\n                                key={`${rIdx}-${cIdx}`}\r\n                                className=\"cell solved\"\r\n                            >\r\n                                {value}\r\n                            </div>\r\n                        )))}\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}